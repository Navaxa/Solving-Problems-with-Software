#BlueJ class context
comment0.target=CSVMin
comment1.params=parser
comment1.target=org.apache.commons.csv.CSVRecord\ coldestHourInFile(org.apache.commons.csv.CSVParser)
comment10.params=
comment10.target=void\ testLowestHumidityInFile()
comment11.params=
comment11.target=org.apache.commons.csv.CSVRecord\ lowerHumidityInManyFiles()
comment12.params=
comment12.target=void\ testLowestHumidityInManyFiles()
comment13.params=parser
comment13.target=double\ averageTemperatureInFile(org.apache.commons.csv.CSVParser)
comment14.params=
comment14.target=void\ testAverageTemperatureInFile()
comment15.params=parser\ value
comment15.target=double\ averageTemperatureWithHighHumidityInFile(org.apache.commons.csv.CSVParser,\ int)
comment16.params=
comment16.target=void\ testAverageTemperatureWithHighHumidityInFile()
comment2.params=
comment2.target=void\ testColdestHourInFile()
comment3.params=
comment3.target=org.apache.commons.csv.CSVRecord\ coldtestInManyDays()
comment4.params=
comment4.target=void\ testColdtestInManyDays()
comment5.params=currentRow\ largestSoFar
comment5.target=org.apache.commons.csv.CSVRecord\ getLargestOfTwo(org.apache.commons.csv.CSVRecord,\ org.apache.commons.csv.CSVRecord)
comment6.params=
comment6.target=java.io.File\ fileWithColdestTemperature()
comment7.params=
comment7.target=void\ testFileWithColdestTemperature()
comment8.params=currentRow\ largestSoFar
comment8.target=org.apache.commons.csv.CSVRecord\ getLowerHumidity(org.apache.commons.csv.CSVRecord,\ org.apache.commons.csv.CSVRecord)
comment9.params=parser
comment9.target=org.apache.commons.csv.CSVRecord\ lowestHumidityInFile(org.apache.commons.csv.CSVParser)
numComments=17
